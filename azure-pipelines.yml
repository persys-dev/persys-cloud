# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3e63a2da-ee1d-40dc-83fc-2d6e34d95ecb'
  imageRepositoryApi: 'api-gateway'
  imageRepositoryEvent: 'events-manager'
  imageRepositoryCi: 'ci-service'
  containerRegistry: 'fingreg.azurecr.io'
  dockerfilePath-api: '$(Build.SourcesDirectory)/api-gateway/Dockerfile'
  dockerfilePath-event: '$(Build.SourcesDirectory)/events-manager/Dockerfile'
  dockerfilePath-ci: '$(Build.SourcesDirectory)/ci-service/Dockerfile'
  dockerfilePath-cd: '$(Build.SourcesDirectory)/cd-service/Dockerfile'
  dockerfilePath-cloud: '$(Build.SourcesDirectory)/cloud-mgmt/Dockerfile'
  dockerfilePath-theye: '$(Build.SourcesDirectory)/theye-service/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'persys-dev'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryApi)
        dockerfile: $(dockerfilePath-api)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryEvent)
        dockerfile: $(dockerfilePath-event)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryCi)
        dockerfile: $(dockerfilePath-ci)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'cicdcloudmanagement-6322.persys'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: |
                fingreg.azurecr.io/$(imageRepositoryApi):$(Build.BuildId)
                fingreg.azurecr.io/$(imageRepositoryEvent):$(Build.BuildId)
                fingreg.azurecr.io/$(imageRepositoryCi):$(Build.BuildId)
              imagePullSecrets: |
                $(imagePullSecret)